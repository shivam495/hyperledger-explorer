{"ast":null,"code":"/**\n *    SPDX-License-Identifier: Apache-2.0\n */import React,{Component}from'react';import compose from'recompose/compose';import{withStyles}from'@material-ui/core/styles';import{connect}from'react-redux';import moment from'moment-timezone';import{TabContent,TabPane,Nav,NavItem,NavLink}from'reactstrap';import classnames from'classnames';import{chartSelectors,chartOperations}from'../../state/redux/charts';import TimeChart from'./TimeChart';import{blockPerHourType,blockPerMinType,currentChannelType,getBlocksPerHourType,getBlocksPerMinType,getTransactionPerHourType,getTransactionPerMinType,transactionPerHourType,transactionPerMinType}from'../types';const blockPerHourSelector=chartSelectors.blockPerHourSelector,blockPerMinSelector=chartSelectors.blockPerMinSelector,currentChannelSelector=chartSelectors.currentChannelSelector,transactionPerHourSelector=chartSelectors.transactionPerHourSelector,transactionPerMinSelector=chartSelectors.transactionPerMinSelector;/* istanbul ignore next */const styles=theme=>{const type=theme.palette.type;const dark=type==='dark';return{chart:{color:dark?'#ffffff':undefined,backgroundColor:dark?'#453e68':undefined}};};export class ChartStats extends Component{constructor(props){super(props);this.syncData=currentChannel=>{const _this$props=this.props,getBlocksPerHour=_this$props.getBlocksPerHour,getBlocksPerMin=_this$props.getBlocksPerMin,getTransactionPerHour=_this$props.getTransactionPerHour,getTransactionPerMin=_this$props.getTransactionPerMin;getBlocksPerMin(currentChannel);getBlocksPerHour(currentChannel);getTransactionPerMin(currentChannel);getTransactionPerHour(currentChannel);};this.timeDataSetup=(chartData=[])=>{let dataMax=0;const displayData=chartData.map(data=>{if(parseInt(data.count,10)>dataMax){dataMax=parseInt(data.count,10);}return{datetime:moment(data.datetime).tz(moment.tz.guess()).format('h:mm A'),count:data.count};});dataMax+=5;return{displayData,dataMax};};this.toggle=tab=>{this.setState({activeTab:tab});};this.state={activeTab:'1'};}componentDidMount(){this.interVal=setInterval(()=>{const currentChannel=this.props.currentChannel;this.syncData(currentChannel);},60000);}componentWillUnmount(){clearInterval(this.interVal);}render(){const activeTab=this.state.activeTab;const _this$props2=this.props,blockPerHour=_this$props2.blockPerHour,blockPerMin=_this$props2.blockPerMin,transactionPerHour=_this$props2.transactionPerHour,transactionPerMin=_this$props2.transactionPerMin,classes=_this$props2.classes;return/*#__PURE__*/React.createElement(\"div\",{className:classes.chart},/*#__PURE__*/React.createElement(Nav,{tabs:true},/*#__PURE__*/React.createElement(NavItem,null,/*#__PURE__*/React.createElement(NavLink,{className:classnames({active:activeTab==='1'}),onClick:()=>{this.toggle('1');}},\"BLOCKS / HOUR\")),/*#__PURE__*/React.createElement(NavItem,null,/*#__PURE__*/React.createElement(NavLink,{className:classnames({active:activeTab==='2'}),onClick:()=>{this.toggle('2');}},\"BLOCKS / MIN\")),/*#__PURE__*/React.createElement(NavItem,null,/*#__PURE__*/React.createElement(NavLink,{className:classnames({active:activeTab==='3'}),onClick:()=>{this.toggle('3');}},\"TX / HOUR\")),/*#__PURE__*/React.createElement(NavItem,null,/*#__PURE__*/React.createElement(NavLink,{className:classnames({active:activeTab==='4'}),onClick:()=>{this.toggle('4');}},\"TX / MIN\"))),/*#__PURE__*/React.createElement(TabContent,{activeTab:activeTab},/*#__PURE__*/React.createElement(TabPane,{tabId:\"1\"},/*#__PURE__*/React.createElement(TimeChart,{chartData:this.timeDataSetup(blockPerHour)})),/*#__PURE__*/React.createElement(TabPane,{tabId:\"2\"},/*#__PURE__*/React.createElement(TimeChart,{chartData:this.timeDataSetup(blockPerMin)})),/*#__PURE__*/React.createElement(TabPane,{tabId:\"3\"},/*#__PURE__*/React.createElement(TimeChart,{chartData:this.timeDataSetup(transactionPerHour)})),/*#__PURE__*/React.createElement(TabPane,{tabId:\"4\"},/*#__PURE__*/React.createElement(TimeChart,{chartData:this.timeDataSetup(transactionPerMin)}))));}}export default compose(withStyles(styles),connect(state=>({blockPerHour:blockPerHourSelector(state),blockPerMin:blockPerMinSelector(state),transactionPerHour:transactionPerHourSelector(state),transactionPerMin:transactionPerMinSelector(state),currentChannel:currentChannelSelector(state)}),{getBlocksPerHour:chartOperations.blockPerHour,getBlocksPerMin:chartOperations.blockPerMin,getTransactionPerHour:chartOperations.transactionPerHour,getTransactionPerMin:chartOperations.transactionPerMin}))(ChartStats);","map":{"version":3,"sources":["/home/shivam/blockchain-explorer/client/src/components/Charts/ChartStats.js"],"names":["React","Component","compose","withStyles","connect","moment","TabContent","TabPane","Nav","NavItem","NavLink","classnames","chartSelectors","chartOperations","TimeChart","blockPerHourType","blockPerMinType","currentChannelType","getBlocksPerHourType","getBlocksPerMinType","getTransactionPerHourType","getTransactionPerMinType","transactionPerHourType","transactionPerMinType","blockPerHourSelector","blockPerMinSelector","currentChannelSelector","transactionPerHourSelector","transactionPerMinSelector","styles","theme","type","palette","dark","chart","color","undefined","backgroundColor","ChartStats","constructor","props","syncData","currentChannel","getBlocksPerHour","getBlocksPerMin","getTransactionPerHour","getTransactionPerMin","timeDataSetup","chartData","dataMax","displayData","map","data","parseInt","count","datetime","tz","guess","format","toggle","tab","setState","activeTab","state","componentDidMount","interVal","setInterval","componentWillUnmount","clearInterval","render","blockPerHour","blockPerMin","transactionPerHour","transactionPerMin","classes","active"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport React, { Component } from 'react';\nimport compose from 'recompose/compose';\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport moment from 'moment-timezone';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport classnames from 'classnames';\nimport { chartSelectors, chartOperations } from '../../state/redux/charts';\nimport TimeChart from './TimeChart';\nimport {\n\tblockPerHourType,\n\tblockPerMinType,\n\tcurrentChannelType,\n\tgetBlocksPerHourType,\n\tgetBlocksPerMinType,\n\tgetTransactionPerHourType,\n\tgetTransactionPerMinType,\n\ttransactionPerHourType,\n\ttransactionPerMinType\n} from '../types';\n\nconst {\n\tblockPerHourSelector,\n\tblockPerMinSelector,\n\tcurrentChannelSelector,\n\ttransactionPerHourSelector,\n\ttransactionPerMinSelector\n} = chartSelectors;\n\n/* istanbul ignore next */\nconst styles = theme => {\n\tconst { type } = theme.palette;\n\tconst dark = type === 'dark';\n\treturn {\n\t\tchart: {\n\t\t\tcolor: dark ? '#ffffff' : undefined,\n\t\t\tbackgroundColor: dark ? '#453e68' : undefined\n\t\t}\n\t};\n};\n\nexport class ChartStats extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactiveTab: '1'\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.interVal = setInterval(() => {\n\t\t\tconst { currentChannel } = this.props;\n\t\t\tthis.syncData(currentChannel);\n\t\t}, 60000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.interVal);\n\t}\n\n\tsyncData = currentChannel => {\n\t\tconst {\n\t\t\tgetBlocksPerHour,\n\t\t\tgetBlocksPerMin,\n\t\t\tgetTransactionPerHour,\n\t\t\tgetTransactionPerMin\n\t\t} = this.props;\n\n\t\tgetBlocksPerMin(currentChannel);\n\t\tgetBlocksPerHour(currentChannel);\n\t\tgetTransactionPerMin(currentChannel);\n\t\tgetTransactionPerHour(currentChannel);\n\t};\n\n\ttimeDataSetup = (chartData = []) => {\n\t\tlet dataMax = 0;\n\t\tconst displayData = chartData.map(data => {\n\t\t\tif (parseInt(data.count, 10) > dataMax) {\n\t\t\t\tdataMax = parseInt(data.count, 10);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdatetime: moment(data.datetime)\n\t\t\t\t\t.tz(moment.tz.guess())\n\t\t\t\t\t.format('h:mm A'),\n\t\t\t\tcount: data.count\n\t\t\t};\n\t\t});\n\n\t\tdataMax += 5;\n\n\t\treturn {\n\t\t\tdisplayData,\n\t\t\tdataMax\n\t\t};\n\t};\n\n\ttoggle = tab => {\n\t\tthis.setState({\n\t\t\tactiveTab: tab\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { activeTab } = this.state;\n\t\tconst {\n\t\t\tblockPerHour,\n\t\t\tblockPerMin,\n\t\t\ttransactionPerHour,\n\t\t\ttransactionPerMin,\n\t\t\tclasses\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<div className={classes.chart}>\n\t\t\t\t<Nav tabs>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '1'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('1');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBLOCKS / HOUR\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '2'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('2');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBLOCKS / MIN\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '3'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('3');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTX / HOUR\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\tclassName={classnames({\n\t\t\t\t\t\t\t\tactive: activeTab === '4'\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tthis.toggle('4');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tTX / MIN\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t</Nav>\n\t\t\t\t<TabContent activeTab={activeTab}>\n\t\t\t\t\t<TabPane tabId=\"1\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(blockPerHour)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t\t<TabPane tabId=\"2\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(blockPerMin)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t\t<TabPane tabId=\"3\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(transactionPerHour)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t\t<TabPane tabId=\"4\">\n\t\t\t\t\t\t<TimeChart chartData={this.timeDataSetup(transactionPerMin)} />\n\t\t\t\t\t</TabPane>\n\t\t\t\t</TabContent>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nChartStats.propTypes = {\n\tblockPerHour: blockPerHourType.isRequired,\n\tblockPerMin: blockPerMinType.isRequired,\n\tcurrentChannel: currentChannelType.isRequired,\n\tgetBlocksPerHour: getBlocksPerHourType.isRequired,\n\tgetBlocksPerMin: getBlocksPerMinType.isRequired,\n\tgetTransactionPerHour: getTransactionPerHourType.isRequired,\n\tgetTransactionPerMin: getTransactionPerMinType.isRequired,\n\ttransactionPerHour: transactionPerHourType.isRequired,\n\ttransactionPerMin: transactionPerMinType.isRequired\n};\n\nexport default compose(\n\twithStyles(styles),\n\tconnect(\n\t\tstate => ({\n\t\t\tblockPerHour: blockPerHourSelector(state),\n\t\t\tblockPerMin: blockPerMinSelector(state),\n\t\t\ttransactionPerHour: transactionPerHourSelector(state),\n\t\t\ttransactionPerMin: transactionPerMinSelector(state),\n\t\t\tcurrentChannel: currentChannelSelector(state)\n\t\t}),\n\t\t{\n\t\t\tgetBlocksPerHour: chartOperations.blockPerHour,\n\t\t\tgetBlocksPerMin: chartOperations.blockPerMin,\n\t\t\tgetTransactionPerHour: chartOperations.transactionPerHour,\n\t\t\tgetTransactionPerMin: chartOperations.transactionPerMin\n\t\t}\n\t)\n)(ChartStats);\n"]},"metadata":{},"sourceType":"module"}