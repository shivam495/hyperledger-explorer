{"ast":null,"code":"/**\n *    SPDX-License-Identifier: Apache-2.0\n */import agent from'superagent';import Auth from'../state/Auth';export const post=(uri,payload)=>new Promise((resolve,reject)=>{agent.post(uri).send(payload).set('Accept','application/json').set('Authorization',\"bearer \".concat(Auth.getToken())).end(withPromiseCallback(resolve,reject));});export const get=uri=>new Promise((resolve,reject)=>{agent.get(uri).set('Accept','application/json').set('Authorization',\"bearer \".concat(Auth.getToken())).end(withPromiseCallback(resolve,reject));});export const put=(uri,payload)=>new Promise((resolve,reject)=>{agent.put(uri).send(payload).set('Accept','application/json').set('Authorization',\"bearer \".concat(Auth.getToken())).end(withPromiseCallback(resolve,reject));});export const deleteRequest=(uri,payload)=>new Promise((resolve,reject)=>{agent.delete(uri).send(payload).set('Accept','application/json').set('Authorization',\"bearer \".concat(Auth.getToken())).end(withPromiseCallback(resolve,reject));});export const withPromiseCallback=(resolve,reject)=>(error,response)=>{if(error){console.error(error);if(response&&response.status===401){Auth.deauthenticateUser();}reject({error});}else{resolve(response.body);}};","map":{"version":3,"sources":["/home/shivam/blockchain-explorer/client/src/services/request.js"],"names":["agent","Auth","post","uri","payload","Promise","resolve","reject","send","set","getToken","end","withPromiseCallback","get","put","deleteRequest","delete","error","response","console","status","deauthenticateUser","body"],"mappings":"AAAA;;GAIA,MAAOA,CAAAA,KAAP,KAAkB,YAAlB,CAEA,MAAOC,CAAAA,IAAP,KAAiB,eAAjB,CAEA,MAAO,MAAMC,CAAAA,IAAI,CAAG,CAACC,GAAD,CAAMC,OAAN,GACnB,GAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CAChCP,KAAK,CACHE,IADF,CACOC,GADP,EAEEK,IAFF,CAEOJ,OAFP,EAGEK,GAHF,CAGM,QAHN,CAGgB,kBAHhB,EAIEA,GAJF,CAIM,eAJN,kBAIiCR,IAAI,CAACS,QAAL,EAJjC,GAKEC,GALF,CAKMC,mBAAmB,CAACN,OAAD,CAAUC,MAAV,CALzB,EAMA,CAPD,CADM,CASP,MAAO,MAAMM,CAAAA,GAAG,CAAGV,GAAG,EACrB,GAAIE,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CAChCP,KAAK,CACHa,GADF,CACMV,GADN,EAEEM,GAFF,CAEM,QAFN,CAEgB,kBAFhB,EAGEA,GAHF,CAGM,eAHN,kBAGiCR,IAAI,CAACS,QAAL,EAHjC,GAIEC,GAJF,CAIMC,mBAAmB,CAACN,OAAD,CAAUC,MAAV,CAJzB,EAKA,CAND,CADM,CAQP,MAAO,MAAMO,CAAAA,GAAG,CAAG,CAACX,GAAD,CAAMC,OAAN,GAClB,GAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CAChCP,KAAK,CACHc,GADF,CACMX,GADN,EAEEK,IAFF,CAEOJ,OAFP,EAGEK,GAHF,CAGM,QAHN,CAGgB,kBAHhB,EAIEA,GAJF,CAIM,eAJN,kBAIiCR,IAAI,CAACS,QAAL,EAJjC,GAKEC,GALF,CAKMC,mBAAmB,CAACN,OAAD,CAAUC,MAAV,CALzB,EAMA,CAPD,CADM,CASP,MAAO,MAAMQ,CAAAA,aAAa,CAAG,CAACZ,GAAD,CAAMC,OAAN,GAC5B,GAAIC,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CAChCP,KAAK,CACHgB,MADF,CACSb,GADT,EAEEK,IAFF,CAEOJ,OAFP,EAGEK,GAHF,CAGM,QAHN,CAGgB,kBAHhB,EAIEA,GAJF,CAIM,eAJN,kBAIiCR,IAAI,CAACS,QAAL,EAJjC,GAKEC,GALF,CAKMC,mBAAmB,CAACN,OAAD,CAAUC,MAAV,CALzB,EAMA,CAPD,CADM,CASP,MAAO,MAAMK,CAAAA,mBAAmB,CAAG,CAACN,OAAD,CAAUC,MAAV,GAAqB,CAACU,KAAD,CAAQC,QAAR,GAAqB,CAC5E,GAAID,KAAJ,CAAW,CACVE,OAAO,CAACF,KAAR,CAAcA,KAAd,EACA,GAAIC,QAAQ,EAAIA,QAAQ,CAACE,MAAT,GAAoB,GAApC,CAAyC,CACxCnB,IAAI,CAACoB,kBAAL,GACA,CACDd,MAAM,CAAC,CAAEU,KAAF,CAAD,CAAN,CACA,CAND,IAMO,CACNX,OAAO,CAACY,QAAQ,CAACI,IAAV,CAAP,CACA,CACD,CAVM","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport agent from 'superagent';\n\nimport Auth from '../state/Auth';\n\nexport const post = (uri, payload) =>\n\tnew Promise((resolve, reject) => {\n\t\tagent\n\t\t\t.post(uri)\n\t\t\t.send(payload)\n\t\t\t.set('Accept', 'application/json')\n\t\t\t.set('Authorization', `bearer ${Auth.getToken()}`)\n\t\t\t.end(withPromiseCallback(resolve, reject));\n\t});\nexport const get = uri =>\n\tnew Promise((resolve, reject) => {\n\t\tagent\n\t\t\t.get(uri)\n\t\t\t.set('Accept', 'application/json')\n\t\t\t.set('Authorization', `bearer ${Auth.getToken()}`)\n\t\t\t.end(withPromiseCallback(resolve, reject));\n\t});\nexport const put = (uri, payload) =>\n\tnew Promise((resolve, reject) => {\n\t\tagent\n\t\t\t.put(uri)\n\t\t\t.send(payload)\n\t\t\t.set('Accept', 'application/json')\n\t\t\t.set('Authorization', `bearer ${Auth.getToken()}`)\n\t\t\t.end(withPromiseCallback(resolve, reject));\n\t});\nexport const deleteRequest = (uri, payload) =>\n\tnew Promise((resolve, reject) => {\n\t\tagent\n\t\t\t.delete(uri)\n\t\t\t.send(payload)\n\t\t\t.set('Accept', 'application/json')\n\t\t\t.set('Authorization', `bearer ${Auth.getToken()}`)\n\t\t\t.end(withPromiseCallback(resolve, reject));\n\t});\nexport const withPromiseCallback = (resolve, reject) => (error, response) => {\n\tif (error) {\n\t\tconsole.error(error);\n\t\tif (response && response.status === 401) {\n\t\t\tAuth.deauthenticateUser();\n\t\t}\n\t\treject({ error });\n\t} else {\n\t\tresolve(response.body);\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}