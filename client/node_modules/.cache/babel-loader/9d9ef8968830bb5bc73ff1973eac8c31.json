{"ast":null,"code":"/**\n *    SPDX-License-Identifier: Apache-2.0\n */import{arrayOf,shape,number,string,func}from'prop-types';export const blockHashType=shape({blockhash:string,blocknum:number,channelname:string,creatdt:string,datahash:string,prehash:string,txcount:number,txhash:arrayOf(string)});export const blockListType=arrayOf(shape({blockhash:string,blocknum:number,channelname:string,createdt:string,datahash:string,prehash:string,txcount:number,txhash:arrayOf(string)}));export const blockPerHourType=arrayOf(shape({count:string,datetime:string}));export const blockPerMinType=arrayOf(shape({count:string,datetime:string}));export const chaincodeType=shape({chaincodename:string,channelName:string,channel_genesis_hash:string,path:string,source:string,txCount:number,version:string});export const chaincodeListType=arrayOf(shape({chaincodename:string,channelName:string,channel_genesis_hash:string,path:string,source:string,txCount:number,version:string}));export const channelsType=arrayOf(shape({blocks:number,channel_hash:string,channelname:string,createdat:string,channel_genesis_hash:string,id:number,transactions:number}));export const chartDataType=shape({dataMax:number.isRequired,displayData:arrayOf(shape({count:string,datetime:string})).isRequired});export const currentChannelType=string;export const dashStatsType=shape({chaincodeCount:string,latestBlock:string,peerCount:string,txCount:string});export const getBlockListType=func;export const getBlocksPerHourType=func;export const getBlocksPerMinType=func;export const getChaincodeListType=func;export const getChangeChannelType=func;export const getChannelType=func;export const getChannelListType=func;export const getChannelsType=func;export const getDashStatsType=func;export const getPeerListType=func;export const getPeerStatusType=func;export const getTransactionInfoType=func;export const getTransactionListType=func;export const getTransactionType=func;export const getTransactionByOrgType=func;export const getTransactionPerHourType=func;export const getTransactionPerMinType=func;export const notificationsType=arrayOf(shape({blockhash:string,datahash:string,time:string,title:string,txcount:number,type:string}));export const onCloseType=func;export const peerListType=arrayOf(shape({channel_genesis_hash:string,name:string,requests:string.isRequired,server_hostname:string.isRequired}));export const peerStatusType=arrayOf(shape({server_hostname:string,status:string}));export const refreshType=func;export const transactionType=shape({chaincodename:string,channelname:string,createdt:string,creator_msp_id:string,endorser_msp_id:string,payload_proposal_hash:string,txhash:string,type:string,validation_code:string});export const transactionByOrgType=arrayOf(shape({count:string,creator_msp_id:string}));export const transactionListType=arrayOf(shape({chaincodename:string,channelname:string,createdt:string,creator_msp_id:string,txhash:string,type:string}));export const transactionPerHourType=arrayOf(shape({count:string,datetime:string}));export const transactionPerMinType=arrayOf(shape({count:string,datetime:string}));","map":{"version":3,"sources":["/home/shivam/blockchain-explorer/client/src/components/types/index.js"],"names":["arrayOf","shape","number","string","func","blockHashType","blockhash","blocknum","channelname","creatdt","datahash","prehash","txcount","txhash","blockListType","createdt","blockPerHourType","count","datetime","blockPerMinType","chaincodeType","chaincodename","channelName","channel_genesis_hash","path","source","txCount","version","chaincodeListType","channelsType","blocks","channel_hash","createdat","id","transactions","chartDataType","dataMax","isRequired","displayData","currentChannelType","dashStatsType","chaincodeCount","latestBlock","peerCount","getBlockListType","getBlocksPerHourType","getBlocksPerMinType","getChaincodeListType","getChangeChannelType","getChannelType","getChannelListType","getChannelsType","getDashStatsType","getPeerListType","getPeerStatusType","getTransactionInfoType","getTransactionListType","getTransactionType","getTransactionByOrgType","getTransactionPerHourType","getTransactionPerMinType","notificationsType","time","title","type","onCloseType","peerListType","name","requests","server_hostname","peerStatusType","status","refreshType","transactionType","creator_msp_id","endorser_msp_id","payload_proposal_hash","validation_code","transactionByOrgType","transactionListType","transactionPerHourType","transactionPerMinType"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  arrayOf, shape, number, string, func,\n} from 'prop-types';\n\nexport const blockHashType = shape({\n  blockhash: string,\n  blocknum: number,\n  channelname: string,\n  creatdt: string,\n  datahash: string,\n  prehash: string,\n  txcount: number,\n  txhash: arrayOf(string),\n});\n\nexport const blockListType = arrayOf(\n  shape({\n    blockhash: string,\n    blocknum: number,\n    channelname: string,\n    createdt: string,\n    datahash: string,\n    prehash: string,\n    txcount: number,\n    txhash: arrayOf(string),\n  }),\n);\n\nexport const blockPerHourType = arrayOf(\n  shape({\n    count: string,\n    datetime: string,\n  }),\n);\n\nexport const blockPerMinType = arrayOf(\n  shape({\n    count: string,\n    datetime: string,\n  }),\n);\n\nexport const chaincodeType = shape({\n  chaincodename: string,\n  channelName: string,\n  channel_genesis_hash: string,\n  path: string,\n  source: string,\n  txCount: number,\n  version: string,\n});\n\nexport const chaincodeListType = arrayOf(\n  shape({\n    chaincodename: string,\n    channelName: string,\n    channel_genesis_hash: string,\n    path: string,\n    source: string,\n    txCount: number,\n    version: string,\n  }),\n);\n\nexport const channelsType = arrayOf(\n  shape({\n    blocks: number,\n    channel_hash: string,\n    channelname: string,\n    createdat: string,\n    channel_genesis_hash: string,\n    id: number,\n    transactions: number,\n  }),\n);\n\nexport const chartDataType = shape({\n  dataMax: number.isRequired,\n  displayData: arrayOf(\n    shape({\n      count: string,\n      datetime: string,\n    }),\n  ).isRequired,\n});\n\nexport const currentChannelType = string;\n\nexport const dashStatsType = shape({\n  chaincodeCount: string,\n  latestBlock: string,\n  peerCount: string,\n  txCount: string,\n});\n\nexport const getBlockListType = func;\nexport const getBlocksPerHourType = func;\nexport const getBlocksPerMinType = func;\nexport const getChaincodeListType = func;\nexport const getChangeChannelType = func;\nexport const getChannelType = func;\nexport const getChannelListType = func;\nexport const getChannelsType = func;\nexport const getDashStatsType = func;\nexport const getPeerListType = func;\nexport const getPeerStatusType = func;\nexport const getTransactionInfoType = func;\nexport const getTransactionListType = func;\nexport const getTransactionType = func;\nexport const getTransactionByOrgType = func;\nexport const getTransactionPerHourType = func;\nexport const getTransactionPerMinType = func;\n\nexport const notificationsType = arrayOf(\n  shape({\n    blockhash: string,\n    datahash: string,\n    time: string,\n    title: string,\n    txcount: number,\n    type: string,\n  }),\n);\n\nexport const onCloseType = func;\n\nexport const peerListType = arrayOf(\n  shape({\n    channel_genesis_hash: string,\n    name: string,\n    requests: string.isRequired,\n    server_hostname: string.isRequired,\n  }),\n);\n\nexport const peerStatusType = arrayOf(\n  shape({\n    server_hostname: string,\n    status: string,\n  }),\n);\n\nexport const refreshType = func;\n\nexport const transactionType = shape({\n  chaincodename: string,\n  channelname: string,\n  createdt: string,\n  creator_msp_id: string,\n  endorser_msp_id: string,\n  payload_proposal_hash: string,\n  txhash: string,\n  type: string,\n  validation_code: string,\n});\n\nexport const transactionByOrgType = arrayOf(\n  shape({\n    count: string,\n    creator_msp_id: string,\n  }),\n);\n\nexport const transactionListType = arrayOf(\n  shape({\n    chaincodename: string,\n    channelname: string,\n    createdt: string,\n    creator_msp_id: string,\n    txhash: string,\n    type: string,\n  }),\n);\n\nexport const transactionPerHourType = arrayOf(\n  shape({\n    count: string,\n    datetime: string,\n  }),\n);\n\nexport const transactionPerMinType = arrayOf(\n  shape({\n    count: string,\n    datetime: string,\n  }),\n);\n"]},"metadata":{},"sourceType":"module"}