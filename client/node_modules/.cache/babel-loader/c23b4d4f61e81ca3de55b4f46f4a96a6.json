{"ast":null,"code":"import _objectSpread from\"/home/shivam/blockchain-explorer/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/**\n *    SPDX-License-Identifier: Apache-2.0\n */import{post,get}from'../../../services/request';import{login as loginAction,network as networkAction,register as registerAction,unregister as unRegisterAction,userlist as userListAction,error as errorAction}from'./actions';import actions from'../charts/actions';import Auth from'../../Auth';const login=({user,password},network)=>dispatch=>post('/auth/login',{user,password,network}).then(resp=>{Auth.authenticateUser(resp.token);dispatch(errorAction(null));dispatch(loginAction(_objectSpread({user},resp)));return{status:'Success'};}).catch(error=>{// eslint-disable-next-line no-console\nconsole.error(error);dispatch(errorAction(JSON.stringify(error)));return{status:'Error',message:'Invalid User, Password'};});const network=()=>dispatch=>get('/auth/networklist',{}).then(({networkList})=>{dispatch(networkAction({networks:networkList}));}).catch(error=>{// eslint-disable-next-line no-console\nconsole.error(error);dispatch(actions.getErroMessage(error));});const register=user=>dispatch=>post('/api/register',_objectSpread({},user)).then(resp=>{if(resp.status===500){dispatch(actions.getErroMessage('500 Internal Server Error: The server has encountered an internal error and unable to complete your request'));}else if(resp.status===400){const message=resp.message;const msg=message.substr(6);return{status:'error',message:msg};}else{dispatch(registerAction(_objectSpread(_objectSpread({},user),resp)));return{status:'success',message:'registered successfully!'};}}).catch(error=>{console.error(error);dispatch(errorAction(error));});const userlist=dispatch=>get('/api/userlist').then(resp=>{if(resp.status===500){dispatch(actions.getErroMessage('500 Internal Server Error: The server has encountered an internal error and unable to complete your request'));}else if(resp.status===400){const message=resp.message;const msg=message.substr(6);return{status:'error',message:msg};}else{dispatch(userListAction(_objectSpread({},resp)));return{status:'success',message:resp};}}).catch(error=>{console.error(error);dispatch(errorAction(error));});const unregister=user=>dispatch=>post('/api/unregister',_objectSpread({},user)).then(resp=>{if(resp.status===500){dispatch(actions.getErroMessage('500 Internal Server Error: The server has encountered an internal error and unable to complete your request'));}else if(resp.status===400){const message=resp.message;const msg=message.substr(6);return{status:'error',message:msg};}else{dispatch(unRegisterAction(_objectSpread(_objectSpread({},user),resp)));return{status:'success',message:'Unregistered successfully!'};}}).catch(error=>{console.error(error);dispatch(errorAction(error));});const logout=()=>dispatch=>post('/auth/logout',{}).then(resp=>{console.log(resp);Auth.deauthenticateUser();dispatch(errorAction(null));return{status:'Success'};}).catch(error=>{console.error(error);dispatch(actions.getErroMessage(error));return{status:'Error',message:'Invalid User token'};});export default{login,network,register,unregister,userlist,logout};","map":{"version":3,"sources":["/home/shivam/blockchain-explorer/client/src/state/redux/auth/operations.js"],"names":["post","get","login","loginAction","network","networkAction","register","registerAction","unregister","unRegisterAction","userlist","userListAction","error","errorAction","actions","Auth","user","password","dispatch","then","resp","authenticateUser","token","status","catch","console","JSON","stringify","message","networkList","networks","getErroMessage","msg","substr","logout","log","deauthenticateUser"],"mappings":"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","sourcesContent":["/**\n *    SPDX-License-Identifier: Apache-2.0\n */\n\nimport { post, get } from '../../../services/request';\n\nimport {\n\tlogin as loginAction,\n\tnetwork as networkAction,\n\tregister as registerAction,\n\tunregister as unRegisterAction,\n\tuserlist as userListAction,\n\terror as errorAction\n} from './actions';\n\nimport actions from '../charts/actions';\n\nimport Auth from '../../Auth';\n\nconst login = ({ user, password }, network) => dispatch =>\n\tpost('/auth/login', { user, password, network })\n\t\t.then(resp => {\n\t\t\tAuth.authenticateUser(resp.token);\n\t\t\tdispatch(errorAction(null));\n\t\t\tdispatch(loginAction({ user, ...resp }));\n\t\t\treturn { status: 'Success' };\n\t\t})\n\t\t.catch(error => {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(JSON.stringify(error)));\n\t\t\treturn { status: 'Error', message: 'Invalid User, Password' };\n\t\t});\n\nconst network = () => dispatch =>\n\tget('/auth/networklist', {})\n\t\t.then(({ networkList }) => {\n\t\t\tdispatch(networkAction({ networks: networkList }));\n\t\t})\n\t\t.catch(error => {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.error(error);\n\t\t\tdispatch(actions.getErroMessage(error));\n\t\t});\n\nconst register = user => dispatch =>\n\tpost('/api/register', { ...user })\n\t\t.then(resp => {\n\t\t\tif (resp.status === 500) {\n\t\t\t\tdispatch(\n\t\t\t\t\tactions.getErroMessage(\n\t\t\t\t\t\t'500 Internal Server Error: The server has encountered an internal error and unable to complete your request'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (resp.status === 400) {\n\t\t\t\tconst message = resp.message;\n\t\t\t\tconst msg = message.substr(6);\n\t\t\t\treturn { status: 'error', message: msg };\n\t\t\t} else {\n\t\t\t\tdispatch(registerAction({ ...user, ...resp }));\n\t\t\t\treturn { status: 'success', message: 'registered successfully!' };\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(error));\n\t\t});\n\nconst userlist = dispatch =>\n\tget('/api/userlist')\n\t\t.then(resp => {\n\t\t\tif (resp.status === 500) {\n\t\t\t\tdispatch(\n\t\t\t\t\tactions.getErroMessage(\n\t\t\t\t\t\t'500 Internal Server Error: The server has encountered an internal error and unable to complete your request'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (resp.status === 400) {\n\t\t\t\tconst message = resp.message;\n\t\t\t\tconst msg = message.substr(6);\n\t\t\t\treturn { status: 'error', message: msg };\n\t\t\t} else {\n\t\t\t\tdispatch(userListAction({ ...resp }));\n\t\t\t\treturn { status: 'success', message: resp };\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(error));\n\t\t});\n\nconst unregister = user => dispatch =>\n\tpost('/api/unregister', { ...user })\n\t\t.then(resp => {\n\t\t\tif (resp.status === 500) {\n\t\t\t\tdispatch(\n\t\t\t\t\tactions.getErroMessage(\n\t\t\t\t\t\t'500 Internal Server Error: The server has encountered an internal error and unable to complete your request'\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else if (resp.status === 400) {\n\t\t\t\tconst message = resp.message;\n\t\t\t\tconst msg = message.substr(6);\n\t\t\t\treturn { status: 'error', message: msg };\n\t\t\t} else {\n\t\t\t\tdispatch(unRegisterAction({ ...user, ...resp }));\n\t\t\t\treturn { status: 'success', message: 'Unregistered successfully!' };\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(errorAction(error));\n\t\t});\n\nconst logout = () => dispatch =>\n\tpost('/auth/logout', {})\n\t\t.then(resp => {\n\t\t\tconsole.log(resp);\n\t\t\tAuth.deauthenticateUser();\n\t\t\tdispatch(errorAction(null));\n\t\t\treturn { status: 'Success' };\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(error);\n\t\t\tdispatch(actions.getErroMessage(error));\n\t\t\treturn { status: 'Error', message: 'Invalid User token' };\n\t\t});\n\nexport default {\n\tlogin,\n\tnetwork,\n\tregister,\n\tunregister,\n\tuserlist,\n\tlogout\n};\n"]},"metadata":{},"sourceType":"module"}